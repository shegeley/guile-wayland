#!@GUILE@ --no-auto-compile -e main
!#
(use-modules (wayland client display)
             (oop goops)
             (ice-9 format)
             (system foreign-library)
             ((system foreign) #:prefix ffi:)
             (rnrs bytevectors)
             (wayland interface)
             (wayland proxy)
             (wayland client protocol wayland)
             (wayland client protocol text-input)
             (wayland client protocol xdg-shell))

(gc-disable)

(define text-input-manager
  (make-parameter #f))

(define (main . _)
  (let* ((w-display (wl-display-connect)))
    (unless w-display
      (display "Unable to connect to wayland compositor")
      (newline)
      (exit -1))
    (display "connect to wayland compositor: ")
    (display w-display)
    (newline)
    (let [(registry (wl-display-get-registry w-display))
          (listener (make <wl-registry-listener>
                      #:global
                      (lambda* (data registry name interface version)
                        (cond ((string=? "zwp_text_input_manager_v3" interface)
                               (format #t "Got call~%")
                               (text-input-manager
                                ;; TODO: figure out the wrapping & unwrapping here.
                                ;; see (wayland client protocol wayland), (wayland client protocol xdg)
                                ;; NOTE: wrap-wl-text-input-manager doesn't exists
                                (wrap-wl-text-input-manager
                                 (wl-registry-bind
                                  registry name
                                  ;; NOTE: %wl-text-input-manager-interface doesn't exists
                                  %wl-text-input-manager-interface 3))))))
                      #:global-remove
                      (lambda (data registry name)
                        (pk 'remove data registry name))))]
      (wl-registry-add-listener registry listener))
    (wl-display-roundtrip w-display)
    (if (text-input-manager)
        (format #t "Got it!~%" )
        (error (format #f "Can't access text-input!")))
    ;; (let [(text-input-manager (wl-compositor-get-text-input-manager (text-input-manager)))]
    ;;   (text-input-manager-add-listener
    ;;    (text-input-manager)
    ;;    (make <text-input-manager-listener>
    ;;      #:get-text-input
    ;;      (lambda (data text-input surface)
    ;;        (pk 'enter text-input surface)))))
    (while (wl-display-dispatch w-display))))
