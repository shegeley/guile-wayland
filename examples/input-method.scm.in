#!@GUILE@ --no-auto-compile -e main
!#

(use-modules
 (wayland client display)
 (oop goops)
 (ice-9 format)
 (system foreign-library)
 ((system foreign) #:prefix ffi:)
 (rnrs bytevectors)
 (wayland interface)
 (wayland proxy)
 (wayland client protocol input-method)
 (wayland client protocol wayland)
 (wayland client protocol xdg-shell))

;; see the reference from wlroots
;; https://github.com/swaywm/wlroots/blob/master/examples/input-method.c

;; TODO: rewrite text-input -> input-method

(gc-disable)

;; (define compositor (make-parameter #f))
;; (define xdg-wm-base (make-parameter #f))
;; (define surface (make-parameter #f))
;; (define xdg-toplevel (make-parameter #f))

(define display
  (make-parameter #f))

(define registry
  (make-parameter #f))

(define seat
  (make-parameter #f))

(define input-method-manager
  (make-parameter #f))

(define input-method
  (make-parameter #f))

(define listener
  (make-parameter #f))

(define (input-surface)
  (make-parameter #f))

(define keyboard-grab
  (make-parameter #f))

(define (main)
  (display (wl-display-connect))
  (unless (display)
    (display "Unable to connect to wayland compositor")
    (newline)
    (exit -1))
  (format #t "Connect to Wayland compositor: ~a ~%" (display))
  (registry (wl-display-get-registry (display)))
  (listener (make <wl-registry-listener>
              #:global
              (lambda* (data registry name interface version)
                (format #t "interface: '~a', version: ~a, name: ~a~%"
                        interface version name)
                (cond
                 ((string=? "wl_compositor" interface)
                  (compositor (wrap-wl-compositor
                               (wl-registry-bind
                                registry name
                                %wl-compositor-interface 3)))
                  (surface (wl-compositor-create-surface (compositor))))
                 ((string=? "wl_seat" interface)
                  (seat (wrap-wl-seat (wl-registry-bind registry name %wl-seat-interface 3))))
                 ((string=? "zwp_input_method_manager_v2" interface)
                  (format #t "Got call~%")
                  (input-method-manager
                   (wrap-zwp-input-method-manager-v2
                    (wl-registry-bind registry name
                                      %zwp-input-method-manager-v2-interface 1))))))
              #:global-remove
              (lambda (data registry name)
                (pk 'remove data registry name))))
  (wl-registry-add-listener (registry) (listener))
  (wl-display-roundtrip (display))
  (if (input-method-manager)
      (format #t "Got it!~%")
      (error (format #f "Can't access input-manager!")))
  (format #t "Input-method manager: ~a ~%" (input-method-manager))
  (input-method (zwp-input-method-manager-v2-get-input-method
                 (input-method-manager)
                 (seat)))
  (format #t "Input-method: ~a ~%" (input-method))
  (let* [(listener
          (make <zwp-input-method-v2-listener>
            ;; NOTE ALL EVENTS MUST HAVE HANDLERS!
            ;; OR WILL RESULT IN ERROR "listener function for opcode 3 of zwp_input_method_v2 is NULL"
            #:text-change-cause
            (lambda args
              (format #t "cause! args: ~a ~%" args))
            #:content-type
            (lambda args
              (format #t "content-type! args: ~a ~%" args))
            #:surrounding-text
            (lambda args
              (format #t "surrounding! args: ~a ~%" args))
            #:unavailable
            (lambda args
              (format #t "unavailable! args: ~a ~%" args))
            #:done
            (lambda args
              (format #t "done! args: ~a ~%" args))
            #:commit-string
            (lambda args
              (format #t "commit! args: ~a ~%" args))
            #:activate
            (lambda (_ im)
              (format #t "activate! im: ~a ~%" im)
              ;; (keyboard-grab (zwp-input-method-v2-grab-keyboard im))
              (zwp-input-method-v2-get-input-popup-surface
               (input-method)
               (input-surface)))
            #:deactivate
            (lambda args
              (format #t "leave! args: ~a ~%" args))))]
    (zwp-input-method-v2-add-listener (input-method) listener))
  (while (wl-display-roundtrip (display))))
